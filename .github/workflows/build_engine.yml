name: Build Engine
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # nothing here
jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        compiler: [ gcc, clang ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Necessary Packages
        run: sudo apt update && sudo apt install -y cmake build-essential xorg-dev mesa-common-dev mesa-utils libssl-dev libasound2-dev libpulse-dev libjack-dev

      - name: Install Clang
        if: ${{matrix.compiler == 'clang'}}
        uses: egor-tensin/setup-clang@v1
        with:
          version: 13
          platform: x64

      - name: Configure CMake
        run: cmake -G "Unix Makefiles" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ChiraEngine-linux-${{matrix.compiler}}-${{matrix.build_type}}
          path: |
            ${{github.workspace}}/build/resources/
            ${{github.workspace}}/build/ChiraEngineGui
            ${{github.workspace}}/build/ChiraModelViewer
            ${{github.workspace}}/build/*.so*
          retention-days: 1

  build-mingw:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        sys: [mingw64, clang64]
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: >-
          git
          make
        pacboy: >-
          toolchain:p
          cmake:p

    - name: Configure CMake (mingw64)
      if: ${{ matrix.sys == 'mingw64' }}
      run: cmake -G "Unix Makefiles" -B build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="/mingw64/bin/gcc.exe" -DCMAKE_CXX_COMPILER="/mingw64/bin/g++.exe"

    - name: Configure CMake (clang64)
      if: ${{ matrix.sys == 'clang64' }}
      run: cmake -G "Unix Makefiles" -B build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="/clang64/bin/clang.exe" -DCMAKE_CXX_COMPILER="/clang64/bin/clang++.exe"

    - name: Build
      run: cmake --build build --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.build_type}}

    - name: Copy Clang DLLs
      if: ${{ matrix.sys == 'clang64' }}
      run: |
        cp /clang64/bin/libc++.dll build/libc++.dll
        cp /clang64/bin/libcrypto-1_1-x64.dll build/libcrypto-1_1-x64.dll
        cp /clang64/bin/libssh2-1.dll build/libssh2-1.dll
        cp /clang64/bin/libunwind.dll build/libunwind.dll
        cp /clang64/bin/zlib1.dll build/zlib1.dll

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ChiraEngine-windows-${{matrix.sys}}-${{matrix.build_type}}
        path: |
          ${{github.workspace}}\build\resources\
          ${{github.workspace}}\build\ChiraEngineGui.exe
          ${{github.workspace}}\build\ChiraModelViewer.exe
          ${{github.workspace}}\build\*.dll
        retention-days: 1

  build-msvc:
    strategy:
      matrix:
        build_type: [Debug, Release]
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
          spectre: false

      - name: Configure CMake
        run: cmake -G "Ninja" -B build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build
        run: cmake --build build --config ${{matrix.build_type}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}}
